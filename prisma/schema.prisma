// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phone         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id             String   @id @default(cuid())
  name           String
  description    String   @db.Text
  price          Float
  originalPrice  Float
  stock          Int
  image          String?
  active         Boolean  @default(true)
  cashOnDelivery Boolean  @default(false)
  vendorId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  viewCount      Int      @default(0)
  
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  orders Order[]
}

model Order {
  id           String      @id @unique
  productId    String
  productName  String
  productPrice Float
  deliveryFee  Float
  totalPrice   Float
  status       OrderStatus @default(PENDING)
  vendorId     String
  userId       String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  product Product @relation(fields: [productId], references: [id])
  vendor  Vendor  @relation(fields: [vendorId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}

model Vendor {
  id              String    @id
  name            String
  email           String    @unique
  phone           String
  address         String?
  description     String?   @db.Text
  joinDate        DateTime  @default(now())
  totalSales      Float     @default(0)
  completedOrders Int       @default(0)
  
  products Product[]
  orders   Order[]
}

enum Role {
  USER
  VENDOR
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
